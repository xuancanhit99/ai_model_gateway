# app/api/routes/chat.py
from fastapi import APIRouter, HTTPException, status, Header, Depends # Added Depends
from app.models.schemas import ChatRequest, ChatResponse, ErrorResponse
from app.services.model_router import ModelRouter # Import ModelRouter
from app.core.config import get_settings
from app.core.auth import verify_api_key # Import the new auth dependency
from typing import Dict, Any # Import Any

router = APIRouter()
settings = get_settings()

# Removed the get_chat_service dependency

@router.post(
    "/generate-text", # Changed endpoint path
    response_model=ChatResponse,
    summary="Generate Text Response using the specified model", # Updated summary
    responses={
        status.HTTP_400_BAD_REQUEST: {"model": ErrorResponse},
        status.HTTP_500_INTERNAL_SERVER_ERROR: {"model": ErrorResponse},
        status.HTTP_503_SERVICE_UNAVAILABLE: {"model": ErrorResponse}, # Keep 503 for potential router/service init issues
    }
)
async def generate_chat_response(
    request_body: ChatRequest,
    x_google_api_key: str | None = Header(None, alias="X-Google-API-Key"),
    x_xai_api_key: str | None = Header(None, alias="X-xAI-API-Key"),
    x_gigachat_api_key: str | None = Header(None, alias="X-GigaChat-API-Key"), # Add GigaChat key header
    x_perplexity_api_key: str | None = Header(None, alias="X-Perplexity-API-Key"), # Add Perplexity key header
    _: Dict[str, Any] = Depends(verify_api_key) # Mark auth_info as unused
):
    """
    Receives a user message and optional chat history, then returns
    a text response generated by the specified model via ModelRouter.
    """
    try:
        # Prepare API keys dictionary
        provider_api_keys: Dict[str, str] = {}
        google_key = x_google_api_key or settings.GOOGLE_AI_STUDIO_API_KEY
        grok_key = x_xai_api_key or settings.XAI_API_KEY
        gigachat_key = x_gigachat_api_key or settings.GIGACHAT_AUTH_KEY # Prioritize header
        perplexity_key = x_perplexity_api_key or settings.PERPLEXITY_API_KEY # Prioritize header

        if google_key:
            provider_api_keys["google"] = google_key
        if grok_key:
            provider_api_keys["grok"] = grok_key
        if gigachat_key: # Add GigaChat key if available
            provider_api_keys["gigachat"] = gigachat_key
        if perplexity_key: # Add Perplexity key if available
            provider_api_keys["perplexity"] = perplexity_key

        # Use ModelRouter to route the request
        response_text, model_used = await ModelRouter.route_simple_chat(
            model=request_body.model, # Pass model from request
            message=request_body.message,
            history=request_body.history,
            provider_api_keys=provider_api_keys
        )
        return ChatResponse(
            response_text=response_text,
            model_used=model_used # Use the model name returned by the router
        )
    except HTTPException as http_exc:
        # Re-raise HTTPExceptions raised by the router/service
        raise http_exc
    except Exception as e:
        # Catch any other unexpected errors during chat generation
        # Log the error e here
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An unexpected error occurred during chat generation: {e}"
        )